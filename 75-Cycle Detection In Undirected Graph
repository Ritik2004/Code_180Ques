import java.util.*;

class Pair{
    int first;
    int second;
     Pair(int first, int second){
            this.first = first;
         this.second = second;
                                                            }
                                                                }


public class Solution {
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for(int i=0;i<=n;i++){
            ans.add(new ArrayList<>());
        }
    

             for(int i=0;i<m;++i){
                      ans.get(edges[i][1]).add(edges[i][0]);
                      ans.get(edges[i][0]).add(edges[i][1]);
                  }
             
        boolean visit[] = new boolean[n+1];

        for(int i=0;i<=n;i++){
            visit[i] = false;
        }
        for(int i=0;i<n;i++){
            if(visit[i]==false){
                if(bfs(visit, ans,n,m,i) == true){
                    return "Yes";
                }
            }
        }
        return "No";
    }
    public static boolean bfs(boolean visit[], ArrayList<ArrayList<Integer>> ans,int n,int m,int ind){
            visit[ind] = true;
            Queue<Pair> q = new LinkedList<>();
            q.add(new Pair(ind,-1));
            while(!q.isEmpty()){
                int node = q.peek().first;
                int parent = q.peek().second;
                q.remove();
                for(int adjnode:ans.get(node)){
                    if(visit[adjnode] == false){
                        visit[adjnode]=true;
                        q.add(new Pair(adjnode,node));
                    }
                    else if(parent!=adjnode){
                          return true;
                    }
                }
            }  
            return false;
    }
    
}
