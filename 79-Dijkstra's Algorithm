import java.util.* ;
import java.io.*; 

class Pair{
	int dis;
	int node;
	Pair(int dis, int node){
         this.dis=dis;
		 this.node=node;
	}
}
public class Solution {
	
	public static ArrayList < Integer > dijkstra(ArrayList< ArrayList < Integer > > vec, int vertices, int edges, int source){
		// Write your code here.
		ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<ArrayList<ArrayList<Integer>>>();
		for(int i=0;i<vertices;i++){
			adj.add(new ArrayList<ArrayList<Integer>>());
		}
		for(int i=0;i<edges;i++){
			int u = vec.get(i).get(0);
			int v = vec.get(i).get(1);
			int w = vec.get(i).get(2);
			ArrayList<Integer> temp1 = new ArrayList<>();
		    ArrayList<Integer> temp2 = new ArrayList<>();
			temp1.add(u);
			temp1.add(w);
            temp2.add(v);
			temp2.add(w);
			adj.get(u).add(temp2);
			adj.get(v).add(temp1);
		}

		PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x,y)->(x.dis-y.dis));
		int dis[] = new int[vertices];
		for(int i=0;i<vertices;i++) dis[i] = (int)(1e9);
		dis[0] = 0;
		pq.add(new Pair(0,0));

		while(!pq.isEmpty()){
			int distance = pq.peek().dis;
			int newnode = pq.peek().node;

			pq.remove();
          for(int i=0;i<adj.get(newnode).size();i++){
			  int adjdis = adj.get(newnode).get(i).get(1);
			  int adjnode = adj.get(newnode).get(i).get(0);

			  if(distance+adjdis<dis[adjnode]){
				  dis[adjnode] = distance + adjdis;
				  pq.add(new Pair(dis[adjnode],adjnode));
			  }
		  }

		}
          ArrayList<Integer>ans = new ArrayList<>();
		  for(int x:dis){
			  ans.add(x);
		  }
		  return ans;
	}
}
